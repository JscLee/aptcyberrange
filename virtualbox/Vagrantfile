# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = "2"
# SPLUNK_DEB = "splunk-6.5.2-67571ef4b87d-linux-2.6-amd64.deb"
# SPLUNK_INDEX = ""

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  config.vm.define :ansible do |ansible_config|
    ansible_config.vm.box = "ubuntu/trusty64"
    ansible_config.vm.hostname = "ansible"
    ansible_config.vm.network "private_network", :netmask => "255.255.255.0", ip: "192.168.30.5",
      virtualbox__intnet: true

    ansible_config.vm.provision :shell, path: "../vagrant/provision/ansible.sh"
    ansible_config.vm.provision :shell, path: "../vagrant/provision/consul.sh"
  end

  config.vm.define :sensu do |sensu_config|
    sensu_config.vm.box = "ubuntu/trusty64"
    sensu_config.vm.hostname = "sensu"
    sensu_config.vm.network "private_network", :netmask => "255.255.255.0", ip: "192.168.30.7",
      virtualbox__intnet: true

    sensu_config.vm.provision :shell, path: "../vagrant/provision/sensu.sh"
  end

  config.vm.define :master do |master_config|
    master_config.vm.box = "ubuntu/trusty64"
    master_config.vm.hostname = "master"
    master_config.vm.network "private_network", :netmask => "255.255.255.0", ip: "192.168.20.5"
    master_config.vm.synced_folder "../data", "/etc/data"
    master_config.vm.synced_folder "../saltstack/salt/", "/srv/salt"
    master_config.vm.synced_folder "../saltstack/pillar/", "/srv/pillar"

    master_config.vm.provision :shell, path: "../vagrant/provision/master.sh"

    master_config.vm.provision :salt do |salt|
      salt.master_config = "../saltstack/etc/master"
      salt.master_key = "../saltstack/keys/master_minion.pem"
      salt.master_pub = "../saltstack/keys/master_minion.pub"
      salt.minion_key = "../saltstack/keys/master_minion.pem"
      salt.minion_pub = "../saltstack/keys/master_minion.pub"
      salt.seed_master = {
                          "nagios" => "../saltstack/keys/nagios.pub"
                         }
      salt.install_type = "stable"
      salt.install_master = true
      salt.no_minion = true
      salt.verbose = true
      salt.colorize = true
      salt.bootstrap_options = "-P -c /tmp"
    end
  end

  config.vm.define :nagios do |nagios_config|
    nagios_config.vm.box = "ubuntu/trusty64"
    nagios_config.vm.hostname = "nagios"
    nagios_config.vm.network "private_network", :netmask => "255.255.255.0", ip: "192.168.50.5",
      virtualbox__intnet: true

    nagios_config.vm.provision :salt do |salt|
      salt.minion_config = "../saltstack/etc/nagios"
      salt.minion_key = "../saltstack/keys/nagios.pem"
      salt.minion_pub = "../saltstack/keys/nagios.pub"
      salt.install_type = "stable"
      salt.verbose = true
      salt.colorize = true
      salt.bootstrap_options = "-P -c /tmp"
    end

    nagios_config.vm.provision :shell, path: "../vagrant/provision/nagios.sh"
  end

  config.vm.define :lamp do |lamp_config|
    lamp_config.vm.box = "ubuntu/trusty64"
    lamp_config.vm.hostname = "lamp"
    lamp_config.vm.network "private_network", :netmask => "255.255.255.0", ip: "192.168.60.5",
      virtualbox__intnet: true
    lamp_config.vm.synced_folder "../data", "/etc/data"

    lamp_config.vm.provision :shell, path: "../vagrant/provision/lamp.sh"
  end

  config.vm.define :gateway do |gateway_config|
    gateway_config.vm.box = "ubuntu/trusty64"
    gateway_config.vm.hostname = "gateway"
    gateway_config.vm.network "private_network", :netmask => "255.255.255.0", ip: "192.168.50.1",
      virtualbox__intnet: true
    gateway_config.vm.network "private_network", :netmask => "255.255.255.0", ip: "192.168.60.1",
      virtualbox__intnet: true
    gateway_config.vm.synced_folder "../data", "/etc/data"

    gateway_config.vm.provision :shell, path: "../vagrant/provision/gateway.sh"
  end

  config.vm.define :dns do |dns_config|
    dns_config.vm.box = "ubuntu/trusty64"
    dns_config.vm.hostname = "dns"
    dns_config.vm.network "private_network", :netmask => "255.255.255.0", ip: "192.168.30.6",
      virtualbox__intnet: true
    dns_config.vm.synced_folder "../data", "/etc/data"

    dns_config.vm.provision :shell, path: "../vagrant/provision/dns.sh"
  end

  config.vm.define :mail do |mail_config|
    mail_config.vm.box = "ubuntu/trusty64"
    mail_config.vm.hostname = "mail"
    mail_config.vm.network "private_network", :netmask => "255.255.255.0", ip: "192.168.30.10",
      virtualbox__intnet: true
    mail_config.vm.synced_folder "../data", "/etc/data"

    mail_config.vm.provision :shell, path: "../vagrant/provision/mail.sh"
  end

  config.vm.define :hvac do |hvac_config|
    hvac_config.vm.box = "ubuntu/trusty64"
    hvac_config.vm.hostname = "hvac"
    hvac_config.vm.network "private_network", :netmask => "255.255.255.0", ip: "192.168.30.15",
      virtualbox__intnet: true
    hvac_config.vm.synced_folder "../data", "/etc/data"

    hvac_config.vm.provision :shell, path: "../vagrant/provision/hvac.sh"
  end

#  config.vm.define :splunk do |splunk_config|
#    splunk_config.vm.box = "ubuntu/trusty64"
#    splunk_config.vm.hostname = "splunk.local"
#    splunk_config.vm.network "private_network", ip: "192.168.50.15"
#    splunk_config.vm.synced_folder "../data", "/etc/data"
#
#    splunk_config.vm.provision "provision", type: "shell" do |splunk_provision|
#      splunk_provision.privileged = false
#      splunk_provision.name = "splunk provision"
#      splunk_provision.path = "provision/splunk/bin/splunk.sh"
#      splunk_provision.env = {
#        :SPLUNK_DEB   => "#{SPLUNK_DEB}",
#        :SPLUNK_INDEX => "#{SPLUNK_INDEX}",
#        :SPLUNK_BIN   => "/opt/splunk/bin/splunk",
#        :SPLUNK_AUTH  => "admin:changeme",
#        :DATA_DIR     => '/vagrant/provision/splunk/data'
#      }
#    end
#
#    splunk_config.vm.provision "start", type: "shell" do |splunk_start|
#      splunk_start.privileged = false
#      splunk_start.name = "splunk start"
#      splunk_start.path = "provision/splunk/bin/splunk_start.sh"
#      splunk_start.env = { :SPLUNK_BIN => "/opt/splunk/bin/splunk" }
#    end
#  end

    # Disable automatic box update checking. If you disable this, then
    # boxes will only be checked for updates when the user runs
    # `vagrant box outdated`. This is not recommended.
    # config.vm.box_check_update = false

    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine. In the example below,
    # accessing "localhost:8080" will access port 80 on the guest machine.
    # config.vm.network "forwarded_port", guest: 80, host: 8080

    # Create a private network, which allows host-only access to the machine
    # using a specific IP.
    # config.vm.network "private_network", ip: "192.168.33.10"

    # Create a public network, which generally matched to bridged network.
    # Bridged networks make the machine appear as another physical device on
    # your network.
    # config.vm.network "public_network"

    # Share an additional folder to the guest VM. The first argument is
    # the path on the host to the actual folder. The second argument is
    # the path on the guest to mount the folder. And the optional third
    # argument is a set of non-required options.
    # config.vm.synced_folder "../data", "/vagrant_data"

    # Provider-specific configuration so you can fine-tune various
    # backing providers for Vagrant. These expose provider-specific options.
    # Example for VirtualBox:
    #
    # config.vm.provider "virtualbox" do |vb|
    #   # Display the VirtualBox GUI when booting the machine
    #   vb.gui = true
    #
    #   # Customize the amount of memory on the VM:
    #   vb.memory = "1024"
    # end
    #
    # View the documentation for the provider you are using for more
    # information on available options.

    # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
    # such as FTP and Heroku are also available. See the documentation at
    # https://docs.vagrantup.com/v2/push/atlas.html for more information.
    # config.push.define "atlas" do |push|
    #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
    # end

    # Enable provisioning with a shell script. Additional provisioners such as
    # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
    # documentation for more information about their specific syntax and use.
    # config.vm.provision "shell", inline: <<-SHELL
    #   apt-get update
    #   apt-get install -y apache2
    # SHELL

end
