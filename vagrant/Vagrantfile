# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = "2"
# SPLUNK_DEB = "splunk-6.5.2-67571ef4b87d-linux-2.6-amd64.deb"
# SPLUNK_INDEX = ""

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "dummy"

  config.vm.define :master do |master_config|
    master_config.vm.hostname = "master"

    master_config.vm.provider :aws do |aws, override|
      aws.tags = {
        'Name' => 'master'
      }
      aws.access_key_id = 
      aws.secret_access_key =
      aws.keypair_name = "mits"

      aws.ami = "ami-f4cc1de2"
      aws.instance_type = "t2.medium"
      aws.security_groups = ["sg-7c0dfd03"]
      aws.subnet_id = "subnet-308bae1d"
      aws.private_ip_address = "172.31.64.5"

      override.ssh.username = "ubuntu"
      override.ssh.private_key_path = "../aws/mits.pem"
    end

    master_config.vm.provision :shell, path: "provision/lamp.sh"
  end

#  config.vm.define :nagios do |nagios_config|
#    nagios_config.vm.box = "ubuntu/trusty64"
#    nagios_config.vm.hostname = "nagios.local"
#    nagios_config.vm.network "private_network", ip: "192.168.50.10"
#
#    nagios_config.vm.provision :salt do |salt|
#      salt.minion_config = "../saltstack/etc/nagios"
#      salt.minion_key = "../saltstack/keys/nagios.pem"
#      salt.minion_pub = "../saltstack/keys/nagios.pub"
#      salt.install_type = "stable"
#      salt.verbose = true
#      salt.colorize = true
#      salt.bootstrap_options = "-P -c /tmp"
#    end
#
#    nagios_config.vm.provision :shell, path: "provision/nagios-server.sh"
#  end
#
#  config.vm.define :splunk do |splunk_config|
#    splunk_config.vm.box = "ubuntu/trusty64"
#    splunk_config.vm.hostname = "splunk.local"
#    splunk_config.vm.network "private_network", ip: "192.168.50.15"
#    splunk_config.vm.synced_folder "../data", "/etc/data"
#
#    splunk_config.vm.provision "provision", type: "shell" do |splunk_provision|
#      splunk_provision.privileged = false
#      splunk_provision.name = "splunk provision"
#      splunk_provision.path = "provision/splunk/bin/splunk.sh"
#      splunk_provision.env = {
#        :SPLUNK_DEB   => "#{SPLUNK_DEB}",
#        :SPLUNK_INDEX => "#{SPLUNK_INDEX}",
#        :SPLUNK_BIN   => "/opt/splunk/bin/splunk",
#        :SPLUNK_AUTH  => "admin:changeme",
#        :DATA_DIR     => '/vagrant/provision/splunk/data'
#      }
#    end
#
#    splunk_config.vm.provision "start", type: "shell" do |splunk_start|
#      splunk_start.privileged = false
#      splunk_start.name = "splunk start"
#      splunk_start.path = "provision/splunk/bin/splunk_start.sh"
#      splunk_start.env = { :SPLUNK_BIN => "/opt/splunk/bin/splunk" }
#    end
#  end

    # Disable automatic box update checking. If you disable this, then
    # boxes will only be checked for updates when the user runs
    # `vagrant box outdated`. This is not recommended.
    # config.vm.box_check_update = false

    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine. In the example below,
    # accessing "localhost:8080" will access port 80 on the guest machine.
    # config.vm.network "forwarded_port", guest: 80, host: 8080

    # Create a private network, which allows host-only access to the machine
    # using a specific IP.
    # config.vm.network "private_network", ip: "192.168.33.10"

    # Create a public network, which generally matched to bridged network.
    # Bridged networks make the machine appear as another physical device on
    # your network.
    # config.vm.network "public_network"

    # Share an additional folder to the guest VM. The first argument is
    # the path on the host to the actual folder. The second argument is
    # the path on the guest to mount the folder. And the optional third
    # argument is a set of non-required options.
    # config.vm.synced_folder "../data", "/vagrant_data"

    # Provider-specific configuration so you can fine-tune various
    # backing providers for Vagrant. These expose provider-specific options.
    # Example for VirtualBox:
    #
    # config.vm.provider "virtualbox" do |vb|
    #   # Display the VirtualBox GUI when booting the machine
    #   vb.gui = true
    #
    #   # Customize the amount of memory on the VM:
    #   vb.memory = "1024"
    # end
    #
    # View the documentation for the provider you are using for more
    # information on available options.

    # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
    # such as FTP and Heroku are also available. See the documentation at
    # https://docs.vagrantup.com/v2/push/atlas.html for more information.
    # config.push.define "atlas" do |push|
    #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
    # end

    # Enable provisioning with a shell script. Additional provisioners such as
    # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
    # documentation for more information about their specific syntax and use.
    # config.vm.provision "shell", inline: <<-SHELL
    #   apt-get update
    #   apt-get install -y apache2
    # SHELL

end
